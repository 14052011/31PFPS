
FUNCTION "MapARange" : REAL
    VAR_INPUT
        v:    REAL;
        i1:    REAL;
        i2:    REAL;
        o1:    REAL;
        o2:    REAL;
    END_VAR
BEGIN
    #MapARange := (#v - #i1) / (#i2 - #i1) * (#o2 - #o1) + #o1;
END_FUNCTION
FUNCTION "LimRange" : REAL
    VAR_INPUT
        L1:    REAL;
        L2:    REAL;
        v:    REAL;
    END_VAR
BEGIN
    IF #v < #L1 THEN
        #LimRange := #L1;
    ELSIF #v > #L2 THEN
        #LimRange := #L2;
    ELSE
        #LimRange := #v;
    END_IF;
END_FUNCTION
DATA_BLOCK "t1"
NON_RETAIN
TOF
BEGIN
END_DATA_BLOCK
DATA_BLOCK "dtclk"
NON_RETAIN
TON
BEGIN
END_DATA_BLOCK
DATA_BLOCK "t2"
NON_RETAIN
TON
BEGIN
END_DATA_BLOCK
FUNCTION_BLOCK "Avg01_code"
    VAR_INPUT
        X:    REAL;
        t:    REAL;
        init:    BOOL;
    END_VAR
    VAR_OUTPUT
        Q:    REAL;
    END_VAR
    VAR
        Q_s:    REAL;
        t_s:    REAL;
    END_VAR
BEGIN
    IF #init
    THEN #Q_s := #X; END_IF;
    #t_s := #t;
    IF #t < 0.1 THEN
        #t_s := 0.1;
    END_IF;
    #Q_s := #Q_s + ((#X - #Q_s) / #t / 10);
    #Q := #Q_s;
END_FUNCTION_BLOCK
DATA_BLOCK "avg01_0001"
NON_RETAIN
"Avg01_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "avg01_0002"
NON_RETAIN
"Avg01_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "avg01_0003"
NON_RETAIN
"Avg01_code"
BEGIN
END_DATA_BLOCK
FUNCTION_BLOCK "EdgePulse_code"
    VAR_INPUT
        CLK:    BOOL;
    END_VAR
    VAR_OUTPUT
        Q0:    BOOL;
        Q1:    BOOL;
        Q01:    BOOL;
    END_VAR
    VAR
        CLK_prev:    BOOL;
    END_VAR
    IF #CLK = #CLK_prev THEN
        #Q0:=0;    #Q1:=0;    #Q01:=0;
    ELSE
        IF #CLK THEN #Q1:=1; ELSE #Q0:=1; END_IF;
        #Q01 := 1;
        #CLK_prev := #CLK;
    END_IF;
END_FUNCTION_BLOCK
DATA_BLOCK "ep_MM_001"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_002"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_003"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_004"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_005"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_006"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_007"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_008"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_009"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_010"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_011"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_012"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_013"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_014"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_015"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_016"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_017"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_018"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_019"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_MM_020"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_GA1_Btn"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_GA2_Btn"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "ep_GA3_Btn"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "EdgePulse_0001"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK
DATA_BLOCK "BD"
NON_RETAIN
    STRUCT
        x1:    Bool;
        MainState:    INT;
        t3_real:    REAL;
        t3_SP:    REAL;
        t3_heating:    BOOL;
        t4_real:    REAL;
        V6:    BOOL;
        V9:    BOOL;
        V4:    BOOL;
        V7:    BOOL;
        V3:    BOOL;
        V2a:    BOOL;
        V2b:    BOOL;
        V1:    BOOL;
        V6_Perc:    REAL;
        Vhs:    BOOL;
        Vhs_Perc:    REAL;
        Pump1:    BOOL;
        Pump1_Perc:    REAL;
        Pump2:    BOOL;
        Pump2_Perc:    REAL;
        Pump3:    BOOL;    
        Sub_3T_State:    INT;
        TankLevel:    REAL;
        Sub_2SC_State:    INT;
    END_STRUCT;
BEGIN
END_DATA_BLOCK
FUNCTION_BLOCK "Reg35P_code"
    VAR_INPUT
        A:    REAL;    
        SP:    REAL;    
        enable:    BOOL;
        off_value:    REAL;    
        mode:    INT;    
        kp:    REAL;    
        k3_P1:    REAL;
        k3_P2:    REAL;
        E_P1:    REAL;
        E_P2:    REAL;
        t5:    REAL;    
        k5_max:    REAL;    
        CZQ_k5low:    REAL;    
        CZQ_k5high:    REAL;    
        CZ_t:    REAL;    
    END_VAR
    VAR_OUTPUT
        Q:    REAL;    
    END_VAR
    VAR
        avgA:    REAL;
        E:    REAL;
        E5:    REAL;
        k3:    REAL;
        k5:    REAL;
        Q3:    REAL;
        Q_full:    REAL;
        CZ_above1below0:    INT;
        CZQ:    REAL;
        CZQ_s:    REAL;
        CZ_cnt:    REAL;
        CZ_cnt_prev:    REAL;
    END_VAR
BEGIN
    IF dtclk.Q THEN
        IF (#E5 < 0 AND CZ_above1below0 = 1) OR (#E5 > 0 AND CZ_above1below0 = 0) THEN
            #CZQ_s    := #CZ_cnt;
            #CZ_cnt_prev    := #CZ_cnt;
            #CZ_cnt    := 0;
        END_IF;
        #CZ_cnt := #CZ_cnt + 1;
        IF #CZ_cnt > 1000000 THEN #CZ_cnt := 1000000; END_IF;
        IF #CZ_cnt > #CZ_cnt_prev THEN
            #CZQ_s    := #CZ_cnt;
        END_IF;
        IF #E5 < 0 THEN CZ_above1below0 := 0; END_IF;
        IF #E5 > 0 THEN CZ_above1below0 := 1; END_IF;
        #CZQ := #CZQ + ((#CZQ_s - #CZQ) * CZ_t);
        #k5 := MapARange(
            v := #CZQ,
            i1:=#CZQ_k5low,    i2:=#CZQ_k5high,
            o1:=0.0,    o2:=#k5_max
        );
        #k5 := LimRange(L1:=0, L2:=#k5_max, v:=#k5);
        #avgA := #avgA + ((#A - #avgA) * #t5);
        #E  := #A - #SP;
        #E5 := #E + ((#A - #avgA) * #k5);
        IF ABS(#E) < #E_P1 THEN
            #k3 := MapARange(
                v := #E,
                i1:=0.0,    i2:=#E_P1,
                o1:=0.0,    o2:=#k3_P1
            );
        ELSE
            #k3 := MapARange(
                v := #E,
                i1:=#E_P1,    i2:=#E_P2,
                o1:=#k3_P1,    o2:=#k3_P2
            );
        END_IF;
        IF #mode = 1 THEN
            #Q3    := #Q3 - (#E5 * #k3);
            #Q_full    := #Q3 - (#E * #kp);
        ELSE
            #Q3    := #Q3 + (#E5 * #k3);
            #Q_full    := #Q3 + (#E * #kp);
        END_IF;
        IF NOT enable THEN
            #Q3    := #off_value;
            #Q_full    := #off_value;
        END_IF;
        #Q3 := LimRange(L1:=0, L2:=100, v:=#Q3);
        #Q  := LimRange(L1:=0, L2:=100, v:=#Q_full);
    END_IF;
END_FUNCTION_BLOCK
DATA_BLOCK "reg35P_0001"
NON_RETAIN
"Reg35P_code"
BEGIN
END_DATA_BLOCK
FUNCTION_BLOCK "KT19_code"
    VAR_INPUT
        xReset:    BOOL;
        T:    TIME;
    END_VAR
    VAR_OUTPUT
        xEnd:    BOOL;
        E:    TIME;
        L:    TIME;
    END_VAR
    VAR
        step:    TIME := T#100ms;
        xEnd_s:    BOOL;
        E_s:    TIME;
    END_VAR
BEGIN
    IF #xReset THEN
        #E_s    := T#0s;
        #xEnd_s    := 0;
    END_IF;
    IF #xEnd_s THEN #xEnd_s := 0; END_IF;
    IF dtclk.Q THEN
        #E_s := #E_s + #step;
        IF #E_s >= #T THEN
            #xEnd_s    := 1;
            #E_s    := T#0s;
        END_IF;
    END_IF;
    #xEnd    := #xEnd_s;
    #E    := #E_s;
    #L    := #T - #E_s;
END_FUNCTION_BLOCK
DATA_BLOCK "kt19_0001"
NON_RETAIN
"KT19_code"
BEGIN
END_DATA_BLOCK
ORGANIZATION_BLOCK "Main"
   VAR_TEMP 
      OB1_EV_CLASS : Byte;   
      OB1_SCAN_1 : Byte;   
      OB1_PRIORITY : Byte;   
      OB1_OB_NUMBR : Byte;   
      OB1_RESERVED_1 : Byte;   
      OB1_RESERVED_2 : Byte;   
      OB1_PREV_CYCLE : Int;   
      OB1_MIN_CYCLE : Int;   
      OB1_MAX_CYCLE : Int;   
      OB1_DATE_TIME : Date_And_Time;   
    r1:    REAL;
   END_VAR
BEGIN
    t1.TON(IN := NOT BD.x1,
                         PT := T#2s,
                         Q => BD.x1);
    t2.TOF(IN := t1.Q,
                           PT := T#1s,
                           Q => BD.x1);
    dtclk.TON(PT:=T#100ms, IN:= NOT dtclk.Q);   (* impulse generator idiom *)
    ep_GA1_btn(CLK := EnterButton1);
    ep_GA2_btn(CLK := EnterButton2);
    ep_GA3_btn(CLK := EnterButton3);
	CASE BD.Sub_2SC_State OF
	0: 
	        BD.V2a    := 0;
	        BD.V2b    := 1;
	1: 
	        BD.V2a    := 1;
	        BD.V2b    := 0;
	END_CASE;
	Step_2SC := INT_TO_WORD( BD.Sub_2SC_State );
	CASE BD.Sub_3T_State OF
	0: 
	    BD.V9 := 0;
	1: 
	    IF BD.TankLevel < 15.0 THEN
	        BD.V9 := 1;
	    END_IF;
	    IF BD.TankLevel > 80.0 THEN
	        BD.V9 := 0;
	    END_IF;
	END_CASE;
	Step_3T := INT_TO_WORD( BD.Sub_3T_State );
    CASE BD.MainState OF
    0: 
        BD.V6    := 0;
        BD.V6_Perc    := 0;
        BD.Sub_3T_State    := 0;
        BD.V4    := 0;
        BD.V7    := 0;
        BD.V3    := 0;
        BD.V1    := 0;
        BD.Vhs    := 0;
        BD.Vhs_Perc    := 0;
        BD.t3_SP    := 0;
        BD.t3_heating    := 0;
        BD.Pump1    := 0;
        BD.Pump1_Perc    := 0.0;
        BD.Pump2    := 0;
        kt19_0001(xReset:=1, T:=T#0s);
        StatusButton1 := 1;
        StatusButton2 := 1;
        StatusButton3 := 1;
        IF ErrorMsg = 0 THEN
            IF ep_GA1_Btn.Q01 THEN
                BD.MainState := 1;
            ELSIF ep_GA2_Btn.Q01 THEN
                BD.MainState := 2;
            ELSIF ep_GA3_Btn.Q01 THEN
                BD.MainState := 13;
            END_IF;
        END_IF;
    1: 
        StatusButton1 := 2;
        StatusButton2 := 0;
        StatusButton3 := 0;
        IF ep_GA1_Btn.Q01 THEN
            BD.MainState := 0;
        END_IF;
    2: 
        BD.V6    := 0;
        BD.Sub_3T_State    := 1;
        BD.V4    := 0;
        BD.V7    := 1;
        BD.V3    := 0;
        BD.V1    := 0;
        BD.Pump1    := 1;
        BD.Pump1_Perc    := 100.0;
        BD.Pump2    := 1;
        kt19_0001(xReset:=0, T:=T#20s);
        IF kt19_0001.xEnd THEN
            kt19_0001(xReset:=1, T:=T#0s);
            BD.MainState := 3;
        END_IF;
        StatusButton1 := 0;
        StatusButton2 := 0;
        StatusButton3 := 0;
    3: 
        BD.V6    := 0;
        BD.V4    := 0;
        BD.V7    := 0;
        BD.V3    := 1;
        BD.t3_SP    := 95;
        BD.t3_heating    := 1;
        IF BD.t3_real > BD.t3_SP - 3.0 THEN
            BD.MainState := 4;
        END_IF;
        StatusButton1 := 0;
        StatusButton2 := 0;
        StatusButton3 := 0;
    4: 
        BD.V6    := 0;
        BD.V4    := 0;
        BD.V7    := 0;
        BD.V3    := 1;
        BD.t3_SP    := 95;
        BD.t3_heating    := 1;
        kt19_0001(xReset:=0, T:=T#300s);
        IF kt19_0001.xEnd THEN
            kt19_0001(xReset:=1, T:=T#0s);
            BD.MainState := 5;
        END_IF;
        StatusButton1 := 0;
        StatusButton2 := 0;
        StatusButton3 := 0;
    5: 
        BD.V6    := 0;
        BD.V4    := 0;
        BD.V7    := 0;
        BD.V3    := 1;
        BD.t3_SP    := 88;
        BD.t3_heating    := 1;
        StatusButton1 := 2;
        StatusButton2 := 3;
        StatusButton3 := 0;
    13: 
        StatusButton1 := 2;
        StatusButton2 := 0;
        StatusButton3 := 0;
        IF ep_GA1_Btn.Q01 THEN
            BD.MainState := 0;
        END_IF;
    END_CASE;
    IF EnterStop THEN
        BD.MainState := 0;
    END_IF;
    IF ResetError THEN
        ErrorMsg := 0;
    END_IF;
    IF NOT LL_EmergencyStop_NC THEN
        BD.MainState    := 0;
        ErrorMsg    := 6;
    END_IF;
    IF ErrorMsg <> 0 THEN
        LL_FaultLight := 1;
        LL_MsgLight := 1;
    ELSE
        LL_FaultLight := 0;
        LL_MsgLight := 0;
    END_IF;
    IF BD.MainState <> 0 THEN
        LL_RunningLight := 1;
    ELSE
        LL_RunningLight := 0;
    END_IF;
    IF LL_AirPressureOK THEN
        LL_PneumoAirPresentLight := 0; 
    ELSE
        LL_PneumoAirPresentLight := 1; 
        ErrorMsg := 4;
    END_IF;
    Step_message    := INT_TO_WORD(BD.MainState);
    Step    := INT_TO_WORD(BD.MainState);
    TimeLeft := DINT_TO_INT(kt19_0001.L / 1000);
    TimePast := DINT_TO_INT(kt19_0001.E / 1000);
    PercVolumeData := INT_TO_WORD( LL_Level_420 );
    r1 := INT_TO_REAL(LL_Level_420);
    r1 := LimRange(
        L1:=0.0, L2:=150.0,
        v:=MapARange(
            v := r1,
            i1:=13872.0, i2:=14800.0,
            o1:=0.0, o2:=100.0
        )
    );
    IF dtclk.Q THEN
        avg01_0001(
            init    := 0,
            X    := r1,
            t    := 2,
            Q    => BD.TankLevel
        );
    END_IF;
    PercVolume := INT_TO_WORD(REAL_TO_INT( BD.TankLevel * 10 ));
    r1 := INT_TO_REAL(LL_t3_e1) / 10.0;
    r1 := MapARange(
        v := r1,
        i1:=19.2, i2:=94.0,
        o1:=13.8, o2:=90.0
    );
    IF dtclk.Q THEN
        avg01_0002(
            init    := 0,
            X    := r1,
            t    := 1,
            Q    => BD.t3_real
        );
    END_IF;
    Term3 := INT_TO_WORD(REAL_TO_INT( BD.t3_real * 10 ));
    r1 := LimRange(
        L1:=0.0, L2:=250.0,
        v:=MapARange(
            v := INT_TO_REAL(LL_t4_420),
            i1:=0.0, i2:=27648.0,
            o1:=0.0, o2:=200.0
        )
    );
    IF r1 < 45.0 THEN
        r1 := MapARange(
            v := r1,
            i1:=11.1, i2:=45.0,
            o1:=9.6, o2:=44.2
        );
    ELSE
        r1 := MapARange(
            v := r1,
            i1:=45.0, i2:=90.6,
            o1:=44.2, o2:=90.0
        );
    END_IF;
    IF dtclk.Q THEN
        avg01_0003(
            init    := 0,
            X    := r1,
            t    := 1,
            Q    => BD.t4_real
        );
    END_IF;
    Term4 := INT_TO_WORD(REAL_TO_INT( BD.t4_real * 10 ));
    ep_MM_001(CLK := "EnterValve20.1");
    ep_MM_002(CLK := "EnterValve20.2");
    ep_MM_003(CLK := "EnterValve20.3");
    ep_MM_004(CLK := "EnterValve20.4");
    ep_MM_005(CLK := "EnterValve20.5");
    ep_MM_006(CLK := "EnterValve20.8");
    ep_MM_007(CLK := "EnterValve20.9");
    ep_MM_008(CLK := "EnterValve20.10");
    IF BD.MainState = 13 THEN
        IF ep_MM_001.Q01    THEN IF ll_V6 THEN ll_V6 := 0; ELSE ll_V6 := 1; END_IF;    END_IF;
        IF ep_MM_002.Q01    THEN IF ll_V9 THEN ll_V9 := 0; ELSE ll_V9 := 1; END_IF;    END_IF;
        IF ep_MM_003.Q01    THEN IF ll_V4 THEN ll_V4 := 0; ELSE ll_V4 := 1; END_IF;    END_IF;
        IF ep_MM_004.Q01    THEN IF ll_V7 THEN ll_V7 := 0; ELSE ll_V7 := 1; END_IF;    END_IF;
        IF ep_MM_005.Q01    THEN IF ll_V3 THEN ll_V3 := 0; ELSE ll_V3 := 1; END_IF;    END_IF;
        IF ep_MM_006.Q01 OR ep_MM_007.Q01    THEN IF ll_V2a THEN ll_V2a := 0; ELSE ll_V2a := 1; END_IF; ll_V2b := NOT ll_V2a;    END_IF;
        IF ep_MM_008.Q01    THEN IF ll_V1 THEN ll_V1 := 0; ELSE ll_V1 := 1; END_IF;    END_IF;
    ELSE
        ll_V6    :=    BD.V6;
        ll_V9    :=    BD.V9;
        ll_V4    :=    BD.V4;
        ll_V7    := NOT    BD.V7;
        ll_V3    := NOT    BD.V3;
        ll_V2a    :=    BD.V2a;
        ll_V2b    :=    BD.V2b;
        ll_V1    :=    BD.V1;
    END_IF;
    "StatusValve20.1"    := ll_V6;
    "StatusValve20.2"    := ll_V9;
    "StatusValve20.3"    := ll_V4;
    "StatusValve20.4"    := ll_V7;
    "StatusValve20.5"    := ll_V3;
    "StatusValve20.9"    := ll_V2a;
    "StatusValve20.8"    := ll_V2b;
    "StatusValve20.10"    := ll_V1;
    ep_MM_009(CLK := "EnterPump1");
    ep_MM_010(CLK := "EnterPump2");
    ep_MM_011(CLK := "EnterPump3");
    IF BD.MainState = 13 THEN
        IF ep_MM_009.Q01 THEN IF LL_Pump1 THEN LL_Pump1 := 0; ELSE LL_Pump1 := 1; END_IF;    END_IF;
        IF ep_MM_010.Q01 THEN IF LL_Pump2 THEN LL_Pump2 := 0; ELSE LL_Pump2 := 1; END_IF;    END_IF;
        IF ep_MM_011.Q01 THEN IF LL_Pump3 THEN LL_Pump3 := 0; ELSE LL_Pump3 := 1; END_IF;    END_IF;
        BD.Pump1_Perc := INT_TO_REAL(WORD_TO_INT( FreqPump1 )) / 10;
        BD.Pump2_Perc := INT_TO_REAL(WORD_TO_INT( FreqPump2 )) / 10;
    ELSE
        LL_Pump1 := BD.Pump1;
        LL_Pump2 := BD.Pump2;
        LL_Pump3 := BD.Pump3;
        BD.Pump2_Perc    := 100;       
        FreqPump1    := INT_TO_WORD(REAL_TO_INT( BD.Pump1_Perc * 10.0 ));
        FreqPump2    := INT_TO_WORD(REAL_TO_INT( BD.Pump2_Perc * 10.0 ));
    END_IF;
    StatusPump1    := LL_Pump1;
    StatusPump2    := LL_Pump2;
    StatusPump3    := LL_Pump3;
    LL_PumpFreq_420 := REAL_TO_INT(
        MapARange(
            v:=LimRange(L1:=0.0, L2:=100.0, v:=BD.Pump1_Perc),
            i1:=0.0, i2:=100.0,
            o1:=0.0, o2:=27648.0
        )
    );
    IF BD.MainState = 13 THEN
        BD.V6_Perc := INT_TO_REAL(WORD_TO_INT( PercValveProdukt )) / 10;
    ELSE
        PercValveProdukt := INT_TO_WORD(REAL_TO_INT( BD.V6_Perc * 10.0 ));
    END_IF;
    LL_V6_420 := REAL_TO_INT(
        MapARange(
            v:=LimRange(L1:=0.0, L2:=100.0, v:=BD.V6_Perc),
            i1:=0.0, i2:=100.0,
            o1:=0.0, o2:=27648.0
        )
    );
    ep_MM_012(CLK := "EnterValve15");
    ep_MM_013(CLK := "EnterValve_6.1");
    IF BD.MainState = 13 THEN
        IF ep_MM_012.Q01 THEN IF ll_V15 THEN ll_V15 := 0; ELSE ll_V15 := 1; END_IF; END_IF;
        IF ep_MM_013.Q01 THEN IF ll_V61 THEN ll_V61 := 0; ELSE ll_V61 := 1; END_IF; END_IF;
        BD.Vhs_Perc := INT_TO_REAL(WORD_TO_INT( PercValveSteam )) / 10;
    ELSE
        ll_V15 := BD.Vhs;
        ll_V61 := BD.Vhs;
        PercValveSteam := INT_TO_WORD(REAL_TO_INT( BD.Vhs_Perc * 10.0 ));
    END_IF;
    LL_Steam_420 := REAL_TO_INT(
        MapARange(
            v:=LimRange(L1:=0.0, L2:=100.0, v:=BD.Vhs_Perc),
            i1:=0.0, i2:=100.0,
            o1:=0.0, o2:=27648.0
        )
    );
    "StatusValve15"    := ll_V15;
    "StatusValve61"    := ll_V61;
        reg35P_0001(
            A    := MapARange(
                    v := BD.t3_real,
                    i1:=0.0,    i2:=150.0,
                    o1:=0.0,    o2:=100.0        
                ),
            SP    := MapARange(
                    v := BD.t3_SP,
                    i1:=0.0,    i2:=150.0,
                    o1:=0.0,    o2:=100.0        
                ),
            mode    := 1,
            enable    := BD.t3_heating,
            off_value    := 0.0,
            kp    := 0.0,
            k3_P1    := 0.01,        
            k3_P2    := 0.1,        
            E_P1    := 1.5,
            E_P2    := 10.0,
            t5    := 4.0,
            k5_max    := 1,        
            CZQ_k5low    := 5,
            CZQ_k5high    := 100,
            CZ_t    := 20.0
        );
        BD.Vhs_Perc := MapARange(
            v := reg35P_0001.Q,
            i1:=0.0,    i2:=100.0,        
            o1:=0.0,    o2:=100.0
        );
END_ORGANIZATION_BLOCK
