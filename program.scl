


FUNCTION "MapARange" : REAL
  VAR_INPUT
    v:  REAL;
    i1:  REAL;
    i2:  REAL;
    o1:  REAL;
    o2:  REAL;
  END_VAR
BEGIN
  #MapARange := (#v - #i1) / (#i2 - #i1) * (#o2 - #o1) + #o1;
END_FUNCTION

FUNCTION "LimRange" : REAL
  VAR_INPUT
    L1:  REAL;
    L2:  REAL;
    v:  REAL;
  END_VAR
BEGIN
  IF #v < #L1 THEN
    #LimRange := #L1;
  ELSIF #v > #L2 THEN
    #LimRange := #L2;
  ELSE
    #LimRange := #v;
  END_IF;
END_FUNCTION

DATA_BLOCK "t1"
NON_RETAIN
TOF
BEGIN
END_DATA_BLOCK

DATA_BLOCK "t2"
NON_RETAIN
TON
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "Avg01_code"
  VAR_INPUT
    X:  REAL;
    t:  REAL;
    init:  BOOL;
  END_VAR
  VAR_OUTPUT
    Q:  REAL;
  END_VAR
  VAR
    Q_s:  REAL;
    t_s:  REAL;
  END_VAR
BEGIN
  IF #init
  THEN #Q_s := #X; END_IF;
  
  #t_s := #t;
  IF #t < 0.1 THEN
    #t_s := 0.1;
  END_IF;
  
  #Q_s := #Q_s + ((#X - #Q_s) / #t / 10);
  
  #Q := #Q_s;
END_FUNCTION_BLOCK


DATA_BLOCK "avg01_0001"
NON_RETAIN
"Avg01_code"
BEGIN
END_DATA_BLOCK


FUNCTION_BLOCK "EdgePulse_code"
  VAR_INPUT
    CLK:  BOOL;
  END_VAR
  VAR_OUTPUT
    Q0:  BOOL;
    Q1:  BOOL;
    Q01:  BOOL;
  END_VAR
  VAR
    CLK_prev:  BOOL;
  END_VAR
  IF #CLK = #CLK_prev THEN
    #Q0:=0;  #Q1:=0;  #Q01:=0;
  ELSE
    IF #CLK THEN #Q1:=1; ELSE #Q0:=1; END_IF;
    #Q01 := 1;
    #CLK_prev := #CLK;
  END_IF;
END_FUNCTION_BLOCK


DATA_BLOCK "ep_GA1_Btn"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK

DATA_BLOCK "ep_GA2_Btn"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK

DATA_BLOCK "ep_GA3_Btn"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "EdgePulse_0001"
NON_RETAIN
"EdgePulse_code"
BEGIN
END_DATA_BLOCK


DATA_BLOCK "BD"
NON_RETAIN
  STRUCT
    x1:  Bool;
    MainState:  INT;
      
    t3_real:  REAL;
    t4_real:  REAL;
      
    V6:  BOOL;
    V9:  BOOL;
    V4:  BOOL;
    V7:  BOOL;
    V3:  BOOL;
    V2a:  BOOL;
    V2b:  BOOL;
    V1:  BOOL;
      
    Pump1:  BOOL;
    Pump1_Perc:  REAL;
    
  END_STRUCT;
BEGIN
END_DATA_BLOCK


ORGANIZATION_BLOCK "Main"
   VAR_TEMP 
      OB1_EV_CLASS : Byte;   // Bits 0-3 = 1 (Coming event), Bits 4-7 = 1 (Event class 1)
      OB1_SCAN_1 : Byte;   // 1 (Cold restart scan 1 of OB 1), 3 (Scan 2-n of OB 1)
      OB1_PRIORITY : Byte;   // Priority of OB Execution
      OB1_OB_NUMBR : Byte;   // 1 (Organization block 1, OB1)
      OB1_RESERVED_1 : Byte;   // Reserved for system
      OB1_RESERVED_2 : Byte;   // Reserved for system
      OB1_PREV_CYCLE : Int;   // Cycle time of previous OB1 scan (milliseconds)
      OB1_MIN_CYCLE : Int;   // Minimum cycle time of OB1 (milliseconds)
      OB1_MAX_CYCLE : Int;   // Maximum cycle time of OB1 (milliseconds)
      OB1_DATE_TIME : Date_And_Time;   // Date and time OB1 started
  r1:  REAL;
   END_VAR
BEGIN
  t1.TON(IN := NOT BD.x1,
                       PT := T#2s,
                       Q => BD.x1);

  t2.TOF(IN := t1.Q,
                         PT := T#1s,
                         Q => BD.x1);

  ep_GA1_btn(CLK := EnterButton1);
  ep_GA2_btn(CLK := EnterButton2);
  ep_GA3_btn(CLK := EnterButton3);


  CASE BD.MainState OF
  0: // Выкл / RESET ALL
    BD.V6  := 0;
    BD.V9  := 0;
    BD.V4  := 0;
    BD.V7  := 0;
    BD.V3  := 0;
    BD.V2a  := 0;
    BD.V2b  := 0;
    BD.V1  := 0;
    
    BD.Pump1  := 0;
    BD.Pump1_Perc  := 0.0;
    
    StatusButton1 := 1;
    StatusButton2 := 1;
    StatusButton3 := 1;
    IF ErrorMsg = 0 THEN
      IF ep_GA1_Btn.Q01 THEN
        BD.MainState := 1;
      ELSIF ep_GA2_Btn.Q01 THEN
        BD.MainState := 2;
      ELSIF ep_GA3_Btn.Q01 THEN
        ErrorMsg := 1;
      END_IF;
    END_IF;
  
  1: // Мойка
    StatusButton1 := 2;
    StatusButton2 := 0;
    StatusButton3 := 0;
    IF ep_GA1_Btn.Q01 THEN
      BD.MainState := 0;
    END_IF;
  
  2: // Прокачка воды
    BD.V6  := 0;
    BD.V4  := 0;
    BD.V7  := 1;
    BD.V3  := 0;
    BD.V2a  := 0;
    BD.V2b  := 0;
    BD.V1  := 0;
    
    BD.Pump1  := 1;
    BD.Pump1_Perc  := 80.0;
    
    StatusButton1 := 0;
    StatusButton2 := 0;
    StatusButton3 := 0;
  
  3: // Цирк + разогрев
    StatusButton1 := 0;
    StatusButton2 := 0;
    StatusButton3 := 0;
  
  4: // Цирк + время стерилиз
    StatusButton1 := 0;
    StatusButton2 := 0;
    StatusButton3 := 0;
  
  5: // Готов к произв
    StatusButton1 := 0;
    StatusButton2 := 0;
    StatusButton3 := 0;
  
  END_CASE;


  IF EnterStop THEN
    BD.MainState := 0;
  END_IF;

  IF ResetError THEN
    ErrorMsg := 0;
  END_IF;

  IF NOT LL_EmergencyStop_NC THEN
    BD.MainState  := 0;
    ErrorMsg  := 6;
  END_IF;
  IF ErrorMsg <> 0 THEN
    LL_FaultLight := 1;
    LL_MsgLight := 1;
  ELSE
    LL_FaultLight := 0;
    LL_MsgLight := 0;
  END_IF;

  IF BD.MainState <> 0 THEN
    LL_RunningLight := 1;
  ELSE
    LL_RunningLight := 0;
  END_IF;

  IF LL_AirPressureOK THEN
    LL_PneumoAirPresentLight := 1;
  ELSE
    LL_PneumoAirPresentLight := 0;
  END_IF;

  Step_message  := INT_TO_WORD(BD.MainState);
  Step  := INT_TO_WORD(BD.MainState);

  PercVolumeData  := INT_TO_WORD(LL_Level_420);
  
  r1 := INT_TO_REAL(LL_t3_e1) / 10.0;
  IF r1 < 51.2 THEN
    r1 := MapARange(
      v := r1,
      i1:=16.0, i2:=51.2,
      o1:=9.6, o2:=44.2
    );
  ELSE
    r1 := MapARange(
      v := r1,
      i1:=51.2, i2:=96.0,
      o1:=44.2, o2:=90.0
    );
  END_IF;
  BD.t3_real := r1;
  Term3 := INT_TO_WORD(REAL_TO_INT( BD.t3_real * 10 ));
  
  r1 := LimRange(
    L1:=0.0, L2:=250.0,
    v:=MapARange(
      v := INT_TO_REAL(LL_t4_420),
      i1:=0.0, i2:=27648.0,
      o1:=0.0, o2:=200.0
    )
  );
  IF r1 < 45.0 THEN
    r1 := MapARange(
      v := r1,
      i1:=11.1, i2:=45.0,
      o1:=9.6, o2:=44.2
    );
  ELSE
    r1 := MapARange(
      v := r1,
      i1:=45.0, i2:=90.6,
      o1:=44.2, o2:=90.0
    );
  END_IF;
  BD.t4_real := r1;
  Term4 := INT_TO_WORD(REAL_TO_INT( BD.t4_real * 10 ));
  

  ll_V6  :=  BD.V6;
  ll_V9  :=  BD.V9;
  ll_V4  :=  BD.V4;
  ll_V7  := NOT  BD.V7;
  ll_V3  := NOT  BD.V3;
  ll_V2a  :=  BD.V2a;
  ll_V2b  :=  BD.V2b;
  ll_V1  :=  BD.V1;
      
  LL_Pump1 := BD.Pump1;
  LL_PumpFreq_420 := MapARange(
    v:=LimRange(L1:=0.0, L2:=100.0, BD.Pump1_Perc),
    i1:=0.0, i2:=27648.0,
    o1:=0.0, o2:=200.0
  );


END_ORGANIZATION_BLOCK

